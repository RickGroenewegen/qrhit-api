// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Isrc {
  id   Int    @id @default(autoincrement())
  isrc String @unique
  year Int

  @@index([isrc])
  @@map("isrc")
}

model OrderType {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  description        String
  amount             Float
  amountWithMargin   Float                @default(10)
  maxCards           Int                  @default(0)
  printApiProductId  String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  digital            Boolean              @default(false)
  Payment            Payment[]
  PaymentHasPlaylist PaymentHasPlaylist[]

  @@map("order_types")
}

model Payment {
  id                      Int                  @id @default(autoincrement())
  userId                  Int
  paymentId               String               @unique
  orderId                 String               @default("")
  printApiOrderId         String               @default("")
  printApiStatus          String               @default("Created")
  printApiShipped         Boolean              @default(false)
  printApiOrderRequest    String?              @default("") @db.Text
  printApiOrderResponse   String?              @default("") @db.Text
  printApiTrackingLink    String?              @default("")
  clientIp                String?
  totalPrice              Float
  status                  String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  fullname                String?
  email                   String?
  address                 String?
  city                    String?
  zipcode                 String?
  countrycode             String?
  shipping                Float?
  price                   Float?
  taxRate                 Float?
  taxRateShipping         Float?
  marketingEmails         Boolean              @default(false)
  differentInvoiceAddress Boolean              @default(false)
  invoiceAddress          String?
  invoiceCity             String?
  invoiceZipcode          String?
  invoiceCountrycode      String?
  paymentMethod           String?
  productPriceWithoutTax  Float
  shippingPriceWithoutTax Float
  productVATPrice         Float
  shippingVATPrice        Float
  totalVATPrice           Float
  locale                  String               @default("en")
  user                    User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  PaymentHasPlaylist      PaymentHasPlaylist[]
  OrderType               OrderType?           @relation(fields: [orderTypeId], references: [id])
  orderTypeId             Int?

  @@index([userId]) // Index for performance on queries
  @@index([paymentId])
  @@map("payments")
}

model User {
  id              Int               @id @default(autoincrement())
  userId          String            @unique
  email           String            @unique
  displayName     String
  hash            String
  payments        Payment[] // One-to-many relation to payments
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UserHasPlaylist UserHasPlaylist[]

  @@index([hash])
  @@map("users")
}

model taxRate {
  id        Int       @id @default(autoincrement())
  rate      Float
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("taxrates")
}

model Playlist {
  id             Int                  @id @default(autoincrement())
  playlistId     String               @unique
  name           String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  featured       Boolean              @default(false)
  featuredLocale String?
  image          String
  price          Float                @default(0)
  numberOfTracks Int                  @default(0)
  resetCache     Boolean              @default(false)
  users          UserHasPlaylist[]
  tracks         PlaylistHasTrack[]
  Payment        PaymentHasPlaylist[]

  @@index([playlistId])
  @@map("playlists")
}

// This is the join table for the many-to-many relationship
model UserHasPlaylist {
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  hash       String

  @@id([playlistId, userId]) // Composite primary key
  @@map("user_has_playlists")
}

model Track {
  id          Int                @id @default(autoincrement())
  trackId     String             @unique
  name        String
  artist      String
  isrc        String?
  year        Int?
  yearSpotify Int?
  spotifyLink String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  playlists   PlaylistHasTrack[]

  @@index([trackId])
  @@map("tracks")
}

// Join table for Playlist and Track
model PlaylistHasTrack {
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId Int
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId    Int

  @@id([playlistId, trackId]) // Composite primary key
  @@map("playlist_has_tracks")
}

model PaymentHasPlaylist {
  payment          Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId        Int
  playlist         Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId       Int
  amount           Int
  numberOfTracks   Int
  orderTypeId      Int
  type             String
  filename         String?
  filenameDigital  String?
  printerPageCount Int      @default(0)

  orderType OrderType @relation(fields: [orderTypeId], references: [id], onDelete: Cascade)

  @@id([paymentId, playlistId]) // Composite primary key
  @@map("payment_has_playlist")
}
