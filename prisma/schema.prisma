// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Isrc {
  id   Int    @id @default(autoincrement())
  isrc String @unique
  year Int

  @@index([isrc])
  @@map("isrc")
}

model Review {
  id        Int      @id @default(autoincrement())
  paymentId Int
  rating    Int
  review    String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model DiscountCode {
  id                Int                 @id @default(autoincrement())
  code              String              @unique
  amount            Float
  message           String?             @db.VarChar(255)
  from              String?             @db.VarChar(100)
  startDate         DateTime?
  endDate           DateTime?
  general           Boolean             @default(false)
  digital           Boolean             @default(false)
  playlistId        String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  DiscountCodedUses DiscountCodedUses[]

  @@index([code])
  @@map("discount_codes")
}

model DiscountCodedUses {
  id             Int          @id @default(autoincrement())
  amount         Float
  discountCode   DiscountCode @relation(fields: [discountCodeId], references: [id], onDelete: Cascade)
  discountCodeId Int
  payment        Payment?     @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId      Int?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([discountCodeId])
  @@map("discount_codes_uses")
}

model OrderType {
  id                 Int                  @id @default(autoincrement())
  type               String               @default("cards")
  name               String               @unique
  description        String
  amount             Float
  amountWithMargin   Float                @default(10)
  maxCards           Int                  @default(0)
  printApiProductId  String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  digital            Boolean              @default(false)
  visible            Boolean              @default(true)
  Payment            Payment[]
  PaymentHasPlaylist PaymentHasPlaylist[]

  @@map("order_types")
}

model Payment {
  id                      Int                  @id @default(autoincrement())
  userId                  Int
  paymentId               String               @unique
  orderId                 String               @default("")
  printApiOrderId         String               @default("")
  printApiStatus          String               @default("Created")
  printApiShipped         Boolean              @default(false)
  printApiOrderRequest    String?              @default("") @db.Text
  printApiOrderResponse   String?              @default("") @db.Text
  printApiTrackingLink    String?              @default("")
  printApiPrice           Float                @default(0)
  clientIp                String?
  totalPrice              Float
  status                  String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  fullname                String
  email                   String
  address                 String?
  housenumber             String?
  city                    String?
  zipcode                 String?
  countrycode             String?
  shipping                Float?
  taxRate                 Float?
  taxRateShipping         Float?
  marketingEmails         Boolean              @default(false)
  differentInvoiceAddress Boolean              @default(false)
  invoiceAddress          String?
  invoiceHousenumber      String?
  invoiceCity             String?
  invoiceZipcode          String?
  invoiceCountrycode      String?
  paymentMethod           String?
  productPriceWithoutTax  Float
  shippingPriceWithoutTax Float
  productVATPrice         Float
  shippingVATPrice        Float
  totalVATPrice           Float
  profit                  Float                @default(0)
  discount                Float                @default(0)
  locale                  String               @default("en")
  qrSubDir                String?
  finalized               Boolean              @default(false)
  allTracksChecked        Boolean              @default(false)
  user                    User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  PaymentHasPlaylist      PaymentHasPlaylist[]
  OrderType               OrderType?           @relation(fields: [orderTypeId], references: [id])
  orderTypeId             Int?
  test                    Boolean              @default(false)
  vibe                    Boolean              @default(false)
  reviewMailSent          Boolean              @default(false)
  finalizedAt             DateTime?
  canBeSentToPrinter      Boolean              @default(false)
  canBeSentToPrinterAt    DateTime?
  userAgreedToPrinting    Boolean              @default(false)
  userAgreedToPrintingAt  DateTime?
  sentToPrinter           Boolean              @default(false)
  sentToPrinterAt         DateTime?

  DiscountCodedUses DiscountCodedUses[]
  Review            Review[]
  CompanyList       CompanyList[]

  @@index([userId]) // Index for performance on queries
  @@index([paymentId])
  @@index([printApiOrderId])
  @@map("payments")
}

model User {
  id              Int              @id @default(autoincrement())
  userId          String           @unique
  email           String           @unique
  displayName     String
  hash            String           @unique
  password        String?
  salt            String?
  companyId       Int?
  marketingEmails Boolean          @default(false)
  sync            Boolean          @default(false)
  payments        Payment[] // One-to-many relation to payments
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  UserSuggestion  UserSuggestion[]
  UserGroupUser   UserInGroup[]
  Company         Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([hash])
  @@map("users")
}

model UserGroup {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  UserGroupUser UserInGroup[]

  @@map("user_groups")
}

model UserInGroup {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  UserGroup UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_in_groups")
}

model PushMessage {
  id              Int      @id @default(autoincrement())
  title           String
  message         String   @db.Text
  numberOfDevices Int
  test            Boolean  @default(false)
  dry             Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("push_messages")
}

model PushToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  type      String
  test      Boolean  @default(false)
  valid     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@map("push_tokens")
}

model taxRate {
  id        Int       @id @default(autoincrement())
  rate      Float
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("taxrates")
}

model genre {
  id        Int        @id @default(autoincrement())
  slug      String?    @unique
  name_en   String
  name_nl   String
  name_de   String
  name_fr   String
  name_es   String
  name_it   String
  name_pt   String
  name_pl   String
  name_hin  String
  name_jp   String
  name_cn   String
  name_ru   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Playlist  Playlist[]

  @@map("genres")
}

model Playlist {
  id                   Int                  @id @default(autoincrement())
  playlistId           String               @unique
  genreId              Int?
  type                 String               @default("cards")
  name                 String
  slug                 String               @default("")
  description_en       String?              @db.Text
  description_nl       String?              @db.Text
  description_de       String?              @db.Text
  description_fr       String?              @db.Text
  description_es       String?              @db.Text
  description_it       String?              @db.Text
  description_pt       String?              @db.Text
  description_pl       String?              @db.Text
  description_hin      String?              @db.Text
  description_jp       String?              @db.Text
  description_cn       String?              @db.Text
  description_ru       String?              @db.Text
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  featured             Boolean              @default(false)
  featuredLocale       String?
  image                String
  price                Float                @default(0)
  priceDigital         Float                @default(0)
  priceSheets          Float                @default(0)
  numberOfTracks       Int                  @default(0)
  resetCache           Boolean              @default(false)
  giftcardAmount       Float                @default(0)
  giftcardFrom         String?              @db.VarChar(100)
  giftcardMessage      String?              @db.VarChar(255)
  decadePercentage2020 Int                  @default(0)
  decadePercentage2010 Int                  @default(0)
  decadePercentage2000 Int                  @default(0)
  decadePercentage1990 Int                  @default(0)
  decadePercentage1980 Int                  @default(0)
  decadePercentage1970 Int                  @default(0)
  decadePercentage1960 Int                  @default(0)
  decadePercentage1950 Int                  @default(0)
  decadePercentage1900 Int                  @default(0)
  decadePercentage0    Int                  @default(0)
  downloads            Int                  @default(0)
  score                Int                  @default(0)
  hideDomain           Boolean              @default(false)
  tracks               PlaylistHasTrack[]
  Payment              PaymentHasPlaylist[]
  UserSuggestion       UserSuggestion[]
  PlayListExtraInfo    TrackExtraInfo[]
  genre                genre?               @relation(fields: [genreId], references: [id])
  CompanyList          CompanyList[]

  @@index([playlistId])
  @@map("playlists")
}

model UserSuggestion {
  id                   Int      @id @default(autoincrement())
  name                 String
  artist               String
  year                 Int
  extraNameAttribute   String?
  extraArtistAttribute String?
  comment              String?  @db.Text
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  track                Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId              Int
  playlist             Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId           Int
  userId               Int
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usersuggestions")
}

model TrackExtraInfo {
  id                   Int      @id @default(autoincrement())
  playlist             Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId           Int
  track                Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId              Int
  extraNameAttribute   String?
  extraArtistAttribute String?
  name                 String?
  artist               String?
  year                 Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("trackextrainfo")
}

model Track {
  id                         Int                          @id @default(autoincrement())
  trackId                    String                       @unique
  name                       String
  album                      String?
  preview                    String?
  artist                     String
  isrc                       String?
  year                       Int?
  spotifyYear                Int?
  discogsYear                Int?
  aiYear                     Int?
  musicBrainzYear            Int?
  openPerplexYear            Int?
  googleResults              String?                      @db.Text
  standardDeviation          Float                        @default(0)
  yearSource                 String?
  spotifyLink                String?
  certainty                  Int                          @default(0)
  reasoning                  String?                      @db.Text
  manuallyChecked            Boolean                      @default(false)
  manuallyCorrected          Boolean                      @default(false)
  youtubeLink                String?
  youtubeLinkNotFound        Boolean                      @default(false)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  playlists                  PlaylistHasTrack[]
  UserSuggestion             UserSuggestion[]
  TrackExtraInfo             TrackExtraInfo[]
  CompanyListSubmissionTrack CompanyListSubmissionTrack[]

  @@index([trackId])
  @@index([isrc])
  @@index([artist, name])
  @@map("tracks")
}

// Join table for Playlist and Track
model PlaylistHasTrack {
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId Int
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId    Int

  @@id([playlistId, trackId]) // Composite primary key
  @@map("playlist_has_tracks")
}

model PaymentHasPlaylist {
  id                         Int       @id @default(autoincrement())
  payment                    Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId                  Int
  playlist                   Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId                 Int
  amount                     Int
  numberOfTracks             Int
  orderTypeId                Int
  type                       String
  subType                    String?   @default("none")
  filename                   String?
  filenameDigital            String?
  filenameDigitalDoubleSided String?
  doubleSided                Boolean   @default(false)
  eco                        Boolean   @default(false)
  hideCircle                 Boolean   @default(false)
  qrColor                    String    @default("#000000")
  hideDomain                 Boolean   @default(false)
  price                      Float
  priceWithoutVAT            Float
  priceVAT                   Float
  printApiPrice              Float     @default(0)
  printApiUploaded           Boolean   @default(false)
  printApiUploadResponse     String?   @db.Text
  printerPageCount           Int       @default(0)
  suggestionsPending         Boolean   @default(false)
  eligableForPrinter         Boolean   @default(false)
  eligableForPrinterAt       DateTime?
  emoji                      String?
  background                 String?
  logo                       String?
  orderType                  OrderType @relation(fields: [orderTypeId], references: [id], onDelete: Cascade)

  @@unique([paymentId, playlistId])
  @@map("payment_has_playlist")
}

model ShippingCost {
  id        Int      @id @default(autoincrement())
  country   String
  amount    Int
  shipping  Float
  handling  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([country, amount])
  @@map("shipping_costs")
}

model ShippingCostNew {
  id        Int      @id @default(autoincrement())
  country   String
  size      Int
  cost      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([country, size])
  @@map("shipping_costs_new")
}

model TrustPilot {
  id          Int      @id @default(autoincrement())
  name        String
  country     String
  title_en    String
  title_nl    String
  title_de    String
  title_fr    String
  title_es    String
  title_it    String
  title_pt    String
  title_pl    String
  title_hin   String
  title_jp    String
  title_cn    String
  title_ru    String?
  message_en  String   @db.Text
  message_nl  String   @db.Text
  message_de  String   @db.Text
  message_fr  String   @db.Text
  message_es  String   @db.Text
  message_it  String   @db.Text
  message_pt  String   @db.Text
  message_pl  String   @db.Text
  message_hin String   @db.Text
  message_jp  String   @db.Text
  message_cn  String   @db.Text
  message_ru  String?  @db.Text
  rating      Float
  image       String
  locale      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trustpilot")
}

model Company {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CompanyList CompanyList[]
  User        User[]

  @@map("companies")
}

model CompanyList {
  id                      Int       @id @default(autoincrement())
  companyId               Int
  playlistId              Int?
  paymentId               Int?
  name                    String
  description             String
  slug                    String
  background              String?
  background2             String?
  playlistSource          String    @default("voting")
  playlistUrl             String?
  playlistUrlFull         String?
  qrColor                 String    @default("#000000")
  textColor               String    @default("#000000")
  status                  String    @default("new") // Progression: new -> company -> questions -> box -> card -> playlist -> personalize
  numberOfTracks          Int
  minimumNumberOfTracks   Int?
  numberOfCards           Int       @default(0)
  startAt                 DateTime?
  endAt                   DateTime?
  votingBackground        String?
  votingLogo              String?
  downloadLink            String?
  reviewLink              String?
  numberOfUncheckedTracks Int       @default(0)
  totalSpotifyTracks      Int       @default(0)
  hideCircle              Boolean   @default(false)
  showNames               Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  Company               Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  CompanyListSubmission CompanyListSubmission[]
  CompanyListQuestion   CompanyListQuestion[]
  Playlist              Playlist?               @relation(fields: [playlistId], references: [id], onDelete: SetNull)
  Payment               Payment?                @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@map("company_lists")
}

model CompanyListQuestion {
  id            Int      @id @default(autoincrement())
  companyListId Int
  question      String
  type          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  CompanyList                CompanyList                  @relation(fields: [companyListId], references: [id], onDelete: Cascade)
  CompanyListAnswer          CompanyListAnswer[]
  CompanyListQuestionOptions CompanyListQuestionOptions[]

  @@map("company_list_questions")
}

model CompanyListQuestionOptions {
  id         Int      @id @default(autoincrement())
  questionId Int
  name       String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  CompanyListQuestion CompanyListQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("company_list_question_options")
}

model CompanyListSubmission {
  id               Int       @id @default(autoincrement())
  companyListId    Int
  hash             String    @unique
  verificationHash String?   @unique
  firstname        String?
  lastname         String?
  email            String?
  status           String    @default("open")
  verified         Boolean   @default(false)
  agreeToUseName   Boolean   @default(false)
  verifiedAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  CompanyList                CompanyList                  @relation(fields: [companyListId], references: [id], onDelete: Cascade)
  CompanyListSubmissionTrack CompanyListSubmissionTrack[] @relation("SubmissionToTracks")
  CompanyListAnswer          CompanyListAnswer[]

  @@index([companyListId])
  @@map("company_list_submissions")
}

model CompanyListAnswer {
  id           Int      @id @default(autoincrement())
  submissionId Int
  questionId   Int
  answer       String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  CompanyListSubmission        CompanyListSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  CompanyListQuestion          CompanyListQuestion   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  companyListQuestionOptionsId Int?

  @@map("company_list_answers")
}

model CompanyListSubmissionTrack {
  id                      Int      @id @default(autoincrement())
  companyListSubmissionId Int
  trackId                 Int
  position                Int
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  CompanyListSubmission CompanyListSubmission @relation("SubmissionToTracks", fields: [companyListSubmissionId], references: [id], onDelete: Cascade)
  Track                 Track                 @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([companyListSubmissionId])
  @@index([trackId])
  @@map("company_list_submission_has_tracks")
}

// Model for storing application-wide settings
model AppSetting {
  key       String   @id @unique // Unique key for the setting (e.g., "spotify_access_token")
  value     String   @db.Text // Value of the setting (use Text for potentially long tokens)
  updatedAt DateTime @updatedAt // Automatically track when the setting was last updated

  @@map("app_settings") // Optional: Define the table name explicitly
}
